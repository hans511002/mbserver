#默认控制台输出【级别顺序:OFF > FATAL > ERROR > WARN > INFO > DEBUG > TRACE > ALL】
log4j.rootLogger=INFO,CONSOLE,DSR
#/home/storm/estorm/logs
 
##############################################################################################################
################配置各种日志打印适配器################
# log4j.appender.{适配器名}=适配器实现类
# log4j.appender.{适配器名}.layout=适配器输出内容格式化处理类
# log4j.appender.{适配器名}.layout.ConversionPattern=日志内容格式串（带宏）
# log4j.appender.{适配器名}.encoding=编码类型（默认UTF-8）
# log4j.appender.{适配器名}.threshold=适配器接收日志“级别门槛”
# log4j.appender.{适配器名}... 其他是各适配器个性配置
##控制台打印
log4j.appender.CONSOLE=org.apache.log4j.ConsoleAppender
log4j.appender.CONSOLE.layout=com.ery.base.support.log4j.PatternLayoutExt
log4j.appender.CONSOLE.layout.ConversionPattern=%-5p[%d{yyyy-MM-dd HH:mm:ss,SSS}][%t=%T][%c{2}]: %m%n
log4j.appender.CONSOLE.encoding=UTF-8
log4j.appender.CONSOLE.threshold=${log.level}
log4j.appender.CONSOLE.target=System.out


#%c 输出日志信息所属的类的全名
#%d 输出日志时间点的日期或时间，默认格式为ISO8601，也可以在其后指定格式，比如：%d{yyy-MM-dd HH:mm:ss }，输出类似：2002-10-18- 22：10：28
#%f 输出日志信息所属的类的类名
#%l 输出日志事件的发生位置，即输出日志信息的语句处于它所在的类的第几行
#%m 输出代码中指定的信息，如log(message)中的message
#%n 输出一个回车换行符，Windows平台为“rn”，Unix平台为“n”
#%p 输出优先级，即DEBUG，INFO，WARN，ERROR，FATAL。如果是调用debug()输出的，则为DEBUG，依此类推
#%r 输出自应用启动到输出该日志信息所耗费的毫秒数
#%t 输出产生该日志事件的线程名
#%T 输出产生该日志时间的线程ID

#按时间循环生成日期文件
log4j.appender.DR=org.apache.log4j.DailyRollFileAppender
log4j.appender.DR.layout=com.ery.base.support.log4j.PatternLayoutExt
log4j.appender.DR.layout.ConversionPattern=%-5p[%d{yyyy-MM-dd HH:mm:ss,SSS}][%t=%T][%l{4}]: %m%n
log4j.appender.DR.encoding=UTF-8
log4j.appender.DR.threshold=${log.level}
##文件名可带宏变量，系统将从System.getProperty(mac)获取，因此你的应用必须保证初始这个变量
log4j.appender.DR.File=${server.logs.dir}/${logFileName}
log4j.appender.DR.datePattern='.'yyyy-MM-dd
log4j.appender.DR.maxFileSize=10MB
log4j.appender.DR.maxBackupFileNum=50
##ps:此appender未支持最多保留某个时长，这种接口。需要自己扩展实现

log4j.appender.DSR=org.apache.log4j.DailyRollFileAppender
log4j.appender.DSR.layout=com.sobey.jcg.support.log4j.PatternLayoutExt
log4j.appender.DSR.layout.ConversionPattern=%-5p[%d{MM/dd HH:mm:ss,SSS}][%l]- %T: %m%n
log4j.appender.DSR.encoding=UTF-8
log4j.appender.DSR.threshold=${log.level}
log4j.appender.DSR.file=${server.logs.dir}/${logFileName}
log4j.appender.DSR.datePattern='.'yyyy-MM-dd
log4j.appender.DSR.maxFileSize=51200000
log4j.appender.DSR.maxBackupFileNum=20

#按大小生成文件
log4j.appender.SR=org.apache.log4j.RollingFileAppender
log4j.appender.SR.layout=com.ery.base.support.log4j.PatternLayoutExt
log4j.appender.SR.layout.ConversionPattern=%-5p[%d{MM/dd HH:mm:ss,SSS}][%l]- %T: %m%n
log4j.appender.SR.encoding=UTF-8
log4j.appender.SR.threshold=${log.level}
log4j.appender.SR.append=true
log4j.appender.SR.maxFileSize=1024K
log4j.appender.SR.file=${server.logs.dir}/${logFileName}
#最多保留10份文件
log4j.appender.SR.maxBackupIndex=10

################其上是配置各种日志适配器###############
##############################################################################################################
##############################################################################################################
#############通过包名控制不同日志输出规则##############
## log4j.logger.{包路径}={级别}[,适配器列表]   【如果适配器与继承的默认重复，会造成日志输出两次】
## log4j.additivity.{包路径}=true|false        【标示是否继承rootLogger规则,默认为true】
############
##本项目包(继承默认在控制台输出且按日期循环输出至文件)
log4j.logger.com.ery=${log.level},CONSOLE,DSR
log4j.additivity.com.ery=false

##org.apache 包所有信息打印
log4j.logger.org.apache=ERROR,CONSOLE,DSR
log4j.additivity.org.apache=true

#控制阿里巴巴的包的输出
log4j.logger.com.alibaba=WARN,CONSOLE,DSR
log4j.additivity.com.alibaba=false


#数据连接池日志配置
log4j.logger.druid.sql=warn,CONSOLE,DR
log4j.logger.druid.sql.DataSource=warn,CONSOLE,DSR
log4j.logger.druid.sql.Connection=warn,CONSOLE,DSR
log4j.logger.druid.sql.Statement=warn,CONSOLE,DSR
log4j.logger.druid.sql.ResultSet=warn,CONSOLE,DSR


###############################################################################################################
##############下面列举一些log4j其他应用##############
###发送日志到socket
#log4j.appender.SOCKET=org.apache.log4j.RollingFileAppender
#log4j.appender.SOCKET.RemoteHost=localhost
#log4j.appender.SOCKET.Port=5001
#log4j.appender.SOCKET.LocationInfo=true
#log4j.appender.SOCKET.layout=com.ery.base.support.log4j.PatternLayoutExt
#log4j.appender.SOCKET.layout.ConversionPattern=[start]%d{DATE}[DATE]%n%p[PRIORITY]%n%x[NDC]%n%t[THREAD]%n%c[CATEGORY]%n%m[MESSAGE]%n%n
#
###发送日志到邮件
#log4j.appender.MAIL=org.apache.log4j.net.SMTPAppender
#log4j.appender.MAIL.Threshold=FATAL
#log4j.appender.MAIL.BufferSize=10
#log4j.appender.MAIL.From=xxx@www.xxx.com
#log4j.appender.MAIL.SMTPHost=www.wusetu.com
#log4j.appender.MAIL.Subject=Log4J Message
#log4j.appender.MAIL.To=xxx@www.xxx.com
#log4j.appender.MAIL.layout=com.ery.base.support.log4j.PatternLayoutExt
#log4j.appender.MAIL.layout.ConversionPattern=[framework] %d - %c -%-4r [%t] %-5p %c %x - %m%n
#
###发送日志到数据库
#log4j.appender.DATABASE=org.apache.log4j.jdbc.JDBCAppender
#log4j.appender.DATABASE.URL=jdbc:mysql://localhost:3306/test
#log4j.appender.DATABASE.driver=com.mysql.jdbc.Driver
#log4j.appender.DATABASE.user=root
#log4j.appender.DATABASE.password=
#log4j.appender.DATABASE.sql=INSERT INTO LOG4J (Message) VALUES ('[framework] %d - %c -%-4r [%t] %-5p %c %x - %m%n')
#log4j.appender.DATABASE.layout=com.ery.base.support.log4j.PatternLayoutExt
#log4j.appender.DATABASE.layout.ConversionPattern=[framework] %d - %c -%-4r [%t] %-5p %c %x - %m%n
#
##############上面列举一些log4j其他应用##############自定义需要实现org.apache.log4j.Appender接口
###############################################################################################################




